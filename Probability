#Task 1 - Independence check !
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataframe
df = pd.read_csv(path)

# probability of  fico score greater than 700

p_a = df[df['fico'].astype(float) >700].shape[0]/df.shape[0]
print(p_a)


# probability of purpose == debt_consolidation
p_b = df[df['purpose']== 'debt_consolidation'].shape[0]/df.shape[0]
print(p_b)

# Create new dataframe for condition ['purpose']== 'debt_consolidation' 
df1 = df[df['purpose']== 'debt_consolidation']

# Calculate the P(A|B)
p_a_b = df1[df1['fico'].astype(float) >700].shape[0]/df1.shape[0]
print(p_a_b)
# Check whether the P(A) and P(B) are independent from each other
result = (p_a == p_a_b)
print(result)

#Task 2 - Bayes theorem 
# code starts here
prob_lp = (df['paid.back.loan']=='Yes').sum()/len(df['paid.back.loan'])
print(prob_lp)
prob_cs = (df['credit.policy']=='Yes').sum()/len(df['credit.policy'])
print(prob_cs)
new_df = df[df['paid.back.loan']=='Yes']
prob_pd_cs = (new_df['credit.policy']=='Yes').sum()/len(new_df['credit.policy'])
print(prob_pd_cs)
bayes = (prob_pd_cs * prob_lp)/prob_cs
print(bayes)
# code ends here

#Task 3 - Purpose vs paid back loan
# code starts here
df.purpose.value_counts(normalize=True).plot(kind='bar')
df1 = df[df['paid.back.loan']=='No']
df1.purpose.value_counts(normalize = True).plot(kind = 'bar')
# code ends here
# code starts here
inst_median = df.installment.median()
inst_mean = df.installment.mean()
plt.hist(df['installment'])
plt.hist(df['log.annual.inc'])
# code ends here
